import OpenAI from "openai";
import * as pdfjsLib from "pdfjs-dist";

// Configure PDF.js worker - utiliser le worker depuis le dossier public
pdfjsLib.GlobalWorkerOptions.workerSrc = '/pdf.worker.min.mjs';

const openai = new OpenAI({
    apiKey: import.meta.env.VITE_OPENAI_API_KEY,
    dangerouslyAllowBrowser: true
});

/**
 * Convertit un fichier en base64
 */
export const fileToBase64 = (file) => {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result);
        reader.onerror = (error) => reject(error);
    });
};

/**
 * Convertit un PDF en image PNG (premi√®re page)
 */
export const pdfToImage = async (file) => {
    try {
        const arrayBuffer = await file.arrayBuffer();
        const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
        const page = await pdf.getPage(1); // Premi√®re page

        // D√©finir l'√©chelle pour une bonne qualit√©
        const scale = 2;
        const viewport = page.getViewport({ scale });

        // Cr√©er un canvas
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        canvas.height = viewport.height;
        canvas.width = viewport.width;

        // Rendre la page sur le canvas
        await page.render({
            canvasContext: context,
            viewport: viewport
        }).promise;

        // Convertir le canvas en base64
        return canvas.toDataURL('image/png');
    } catch (error) {
        console.error("Erreur lors de la conversion PDF en image:", error);
        throw new Error("Impossible de convertir le PDF en image");
    }
};

/**
 * Extrait les donn√©es d'une fiche de paie via OpenAI Vision API
 */
export const extractPayslipData = async (file) => {
    try {
        let base64Data;
        
        // V√©rifier si c'est un PDF et le convertir en image
        if (file.type === 'application/pdf') {
            base64Data = await pdfToImage(file);
        } else {
            // Si c'est d√©j√† une image, utiliser directement
            base64Data = await fileToBase64(file);
        }

        // Cr√©er le prompt pour extraire les donn√©es
        const prompt = `Tu es un expert en analyse de fiches de paie fran√ßaises.
Analyse la fiche de paie fournie en extrayant TOUS les montants de mani√®re fiable, 
et g√©n√®re un JSON exhaustif avec la structure ci-dessous.

‚ö†Ô∏è R√àGLES D‚ÄôEXTRACTION TR√àS IMPORTANTES :

1. **DISTINCTION ENTRE COLONNES**
   - Ne JAMAIS m√©langer les cotisations SALARIALES (colonne "A d√©duire") et PATRONALES (colonne "Charges patronales").
   - Si une m√™me ligne appara√Æt des deux c√¥t√©s :
        ‚Üí le montant "A d√©duire" va dans "employeeContributions"
        ‚Üí le montant "Charges patronales" va dans "employerContributions"
   - Si une ligne n'appara√Æt que dans une colonne, **ne cr√©e pas l'autre c√¥t√© par inf√©rence**.

2. **ANCRAGE PAR COLONNE**
   - Seules les lignes pr√©sentes dans la colonne "A d√©duire" peuvent √™tre class√©es en "employeeContributions"
   - Seules les lignes pr√©sentes dans la colonne "Charges patronales" peuvent √™tre class√©es en "employerContributions"

3. **ANCRAGE PAR SECTION**
   - Chaque bloc commence par un intitul√© de section explicite (ex : Sant√©, Retraite, Famille, Assurance ch√¥mage, Cotisations statutaires, Autres contributions‚Ä¶).
   - Une ligne appartient STRICTEMENT √† la section en cours jusqu'√† l'apparition d'un nouveau titre de section.
   - Ne jamais faire "d√©border" une ligne d'une section pr√©c√©dente (ex : les lignes "Autres contributions dues par l'employeur" ne peuvent jamais √™tre class√©es sous "Sant√©").

4. **CAT√âGORISATION PAR MOTS-CL√âS**
   - Une fois la section identifi√©e, classe la ligne dans la bonne sous-cat√©gorie du JSON selon les mots-cl√©s suivants :
     - Sant√© ‚Üí Maladie, Maternit√©, Invalidit√©, Incapacit√©, D√©c√®s, Sant√©, Mutuelle, Accidents du travail
     - Retraite ‚Üí S√©curit√© Sociale plafonn√©e, d√©plafonn√©e, Compl√©mentaire, Tranche 1/2, Agirc-Arrco
     - Famille ‚Üí Famille, Allocations familiales
     - Ch√¥mage ‚Üí Assurance ch√¥mage, APEC
     - CSE ‚Üí CSE, Comit√©, fonctionnement, activit√©s sociales
     - Autres ‚Üí Formation, mobilit√©, ADESATT, taxes, restauration, Autres contributions dues par l'employeur, etc.

5. **EXCLUSIONS**
   - Les lignes commen√ßant par "Autres contributions dues par l'employeur" vont TOUJOURS dans "employerContributions.other", jamais dans "health"
   - "Ch√¥mage" ne va dans "employeeContributions" que s'il est visiblement pr√©sent dans la colonne "A d√©duire"
   - "S√©curit√© Sociale - Mal. Mat. Inval. D√©c√®s" va dans "employerContributions.health" uniquement si elle figure dans la colonne "Charges patronales"

6. **LIGNES UNIQUES**
   - Si un intitul√© appara√Æt deux fois (bases diff√©rentes), conserve chaque occurrence s√©par√©ment avec son montant.
   - Si une ligne a deux montants (gauche/droite), cr√©e deux lignes distinctes : une par colonne.

7. **TOTAUX**
   - "employerContributions.total" = somme stricte de toutes les lignes patronales
   - "employeeContributions.total" = somme stricte de toutes les lignes salariales
   - V√©rifie que :
        ‚Üí La somme de toutes les cotisations patronales = ‚ÄúTotal des cotisations et contributions‚Äù c√¥t√© employeur.
        ‚Üí La somme de toutes les cotisations salariales = ‚ÄúTotal des cotisations et contributions‚Äù c√¥t√© salari√©.

8. **CONTR√îLES D‚ÄôINT√âGRIT√â**
   - Si une ligne est class√©e dans une mauvaise cat√©gorie (ex : sant√© alors qu‚Äôelle contient ‚ÄúAutres contributions‚Äù), rejette-la et reclasse-la selon les r√®gles ci-dessus.
   - Si la somme des lignes d‚Äôune cat√©gorie d√©passe le total de la colonne correspondante, v√©rifie qu‚Äôaucune ligne n‚Äôa √©t√© dupliqu√©e ou compt√©e deux fois.

---

### STRUCTURE √Ä RETOURNER

{
  "employeeName": "Nom et pr√©nom de l'employ√©",
  "period": "Mois et ann√©e (format: janvier 2024)",
  "grossSalary": montant du salaire brut (ligne ‚ÄúSalaire brut‚Äù),
  "netSalaryBeforeTax": montant du net avant imp√¥t (ligne ‚ÄúNet √† payer avant imp√¥t sur le revenu‚Äù),
  "netSalaryAfterTax": montant du net pay√© (ligne ‚ÄúNet pay√©‚Äù),

  "employerContributions": {
    "total": SOMME de toutes les cotisations ou charges patronales,
    "health": {
      "total": SOMME des lignes sant√© employeur,
      "lines": [
        {"name": "nom exact de la ligne", "amount": montant}
      ]
    },
    "retirement": {
      "total": SOMME des lignes retraite employeur,
      "lines": [{"name": "nom exact de la ligne", "amount": montant}]
    },
    "family": {
      "total": SOMME de la ligne Famille,
      "lines": [{"name": "nom exact de la ligne", "amount": montant}]
    },
    "unemployment": {
      "total": SOMME des lignes ch√¥mage employeur,
      "lines": [{"name": "nom exact de la ligne", "amount": montant}]
    },
    "cse": {
      "total": SOMME des lignes CSE employeur,
      "lines": [{"name": "nom exact", "amount": montant}]
    },
    "other": {
      "total": SOMME des autres lignes employeur (formation, mobilit√©, ADESATT, taxes, restauration, etc.),
      "lines": [{"name": "nom exact de la ligne", "amount": montant}]
    }
  },

  "employeeContributions": {
    "total": SOMME de toutes les cotisations salariales,
    "health": {
      "total": SOMME sant√© salari√©,
      "lines": [{"name": "nom exact de la ligne", "amount": montant}]
    },
    "retirement": {
      "total": SOMME retraite salari√©,
      "lines": [{"name": "nom exact de la ligne", "amount": montant}]
    },
    "unemployment": {
      "total": SOMME ch√¥mage salari√© (exclure ‚ÄúCh√¥mage‚Äù si absent de la colonne ‚ÄúA d√©duire‚Äù),
      "lines": [{"name": "nom exact de la ligne", "amount": montant}]
    },
    "csgCrds": {
      "total": SOMME CSG/CRDS,
      "lines": [{"name": "nom exact", "amount": montant}]
    },
    "other": {
      "total": SOMME autres salari√© (Titres restaurant, Cantine, Repas, etc.),
      "lines": [{"name": "nom exact", "amount": montant}]
    }
  },

  "superGross": grossSalary + employerContributions.total,

  "withholdingTax": {
    "amount": montant de l‚Äôimp√¥t pr√©lev√© √† la source,
    "line": "Imp√¥t sur le revenu pr√©lev√© √† la source - PAS",
    "rate": taux appliqu√© en pourcentage
  }
}

---

‚ö†Ô∏è Retourne UNIQUEMENT le JSON valide, sans texte avant ni apr√®s.  
Aucune phrase, aucun commentaire.
`;

        // Appeler l'API OpenAI Vision avec GPT-5
        const response = await openai.chat.completions.create({
            model: "gpt-5",
            messages: [
                {
                    role: "user",
                    content: [
                        { type: "text", text: prompt },
                        {
                            type: "image_url",
                            image_url: {
                                url: base64Data,
                            },
                        },
                    ],
                },
            ],
            max_completion_tokens: 16000,
        });

        // Extraire et parser la r√©ponse JSON
        const content = response.choices[0].message.content;
        
        console.group("ü§ñ Analyse GPT-5");
        console.log("R√©ponse brute compl√®te:", content);
        
        // GPT-5 peut retourner du texte avant/apr√®s le JSON - extraction robuste
        let jsonContent = content.trim();
        
        // √âtape 1: Retirer les markdown code blocks si pr√©sents
        if (jsonContent.includes('```json')) {
            const regex = /```json\s*([\s\S]*?)\s*```/;
            const match = regex.exec(jsonContent);
            if (match) {
                jsonContent = match[1].trim();
                console.log("üì¶ JSON extrait d'un code block markdown");
            }
        } else if (jsonContent.includes('```')) {
            const regex = /```\s*([\s\S]*?)\s*```/;
            const match = regex.exec(jsonContent);
            if (match) {
                jsonContent = match[1].trim();
                console.log("üì¶ JSON extrait d'un code block");
            }
        }
        
        // √âtape 2: Extraire le JSON en trouvant le premier { et le dernier } correspondant
        const firstBrace = jsonContent.indexOf('{');
        const lastBrace = jsonContent.lastIndexOf('}');
        
        if (firstBrace !== -1 && lastBrace !== -1 && lastBrace > firstBrace) {
            jsonContent = jsonContent.substring(firstBrace, lastBrace + 1);
            console.log("üéØ JSON extrait entre accolades (longueur:", jsonContent.length, "caract√®res)");
        }
        
        // √âtape 3: Nettoyer les trailing commas (virgules en trop avant } ou ])
        // Cela corrige les erreurs JSON comme: {"key": "value",} ou ["item",]
        jsonContent = jsonContent
            // Retirer virgules avant }
            .replaceAll(/,(\s*})/g, '$1')
            // Retirer virgules avant ]
            .replaceAll(/,(\s*])/g, '$1')
            // Retirer virgules multiples
            .replaceAll(/,+/g, ',');
        
        console.log("‚ú® JSON nettoy√© (COMPLET - inspectable):", jsonContent);
        console.log("üìè Longueur du JSON:", jsonContent.length, "caract√®res");
        console.log("üîö Se termine par }:", jsonContent.trim().endsWith('}') ? "‚úÖ OUI" : "‚ùå NON (TRONQU√â!)");
        
        const data = JSON.parse(jsonContent);
        console.log("‚úÖ Donn√©es pars√©es avec succ√®s:", data);
        console.groupEnd();
        
        return {
            success: true,
            data: data,
        };
    } catch (error) {
        console.error("Erreur lors de l'extraction des donn√©es:", error);
        return {
            success: false,
            error: error.message || "Une erreur est survenue lors de l'analyse de la fiche de paie",
        };
    }
};

